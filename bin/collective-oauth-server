#!/usr/bin/env node
'use strict';

var dashdash = require('dashdash');

var server = require('../index').server;

var pkg = require('../package.json');

function process_args(argv) {

    if (!argv) {
        argv = process.argv;
    }

    var options = [
        {
            names: ['hostname', 'host'],
            type: 'string',
            help: 'The the local host to run as (default: localhost).',
            default: process.env.HOSTNAME || process.env.HOST || 'localhost',
            env: 'HOSTNAME'
        },
        {
            names: ['port', 'p'],
            type: 'number',
            help: 'The local port to run as (default: 80).',
            default: 80,
            env: 'PORT'
        },
        {
            names: ['collective-protocol'],
            type: 'string',
            help: 'The Widen Collective protocol (default: https).',
            default: 'https',
            env: 'COLLECTIVE_PROTOCOL'
        },
        {
            names: ['collective-host'],
            type: 'string',
            help: 'The Widen Collective host ' +
                  '(default: demo.widencollective.com).',
            default: 'demo.widencollective.com',
            env: 'COLLECTIVE_HOST'
        },
        {
            names: ['collective-port'],
            type: 'number',
            help: 'The Widen Collective port (default: 80).',
            default: 80,
            env: 'COLLECTIVE_PORT'
        },
        {
            names: ['client-id', 'collective-client-id', 'username'],
            type: 'string',
            help: 'OAuth client id. Suggested to use environment variables ' +
                  'instead.',
            env: 'COLLECTIVE_CLIENT_ID'
        },
        {
            names: ['client-secret', 'collective-client-secret', 'password'],
            type: 'string',
            help: 'OAuth client secret. Suggested to use environment ' +
                  'variables  instead.',
            env: 'COLLECTIVE_CLIENT_SECRET'
        },
        {
            names: ['static'],
            type: 'string',
            help: 'Path to host static files from (default: ./static)',
            default: './static',
            env: 'COLLECTIVE_STATIC'
        },
        {
            names: ['verbose', 'v'],
            type: 'arrayOfBool',
            help: 'Verbose output. Use multiple times for more verbose.'
        },
        {
            names: ['version'],
            type: 'bool',
            help: 'Print version and exit.'
        },
        {
            names: ['help', 'h'],
            type: 'bool',
            help: 'Print this help and exit.'
        }
    ];

    var parser = dashdash.createParser({ options: options });

    var opts;
    try {
        opts = parser.parse(argv);
    } catch (e) {
        console.error('collective-oauth-server [error]: %s', e.message);
        process.exit(1);
    }

    if (opts.help) {
        var help = parser.help({includeEnv: true}).trimRight();
        console.log('usage: node collective-oauth [OPTIONS]\n' +
                    'options:\n' +
                    help);
        process.exit(0);
    }
    else if (opts.version) {
        console.log('collective-oauth ' + pkg.version + '\n');
        process.exit(0);
    }
    else {
        return opts;
    }


}

function main(argv) {

    var args = process_args(argv);

    var collective_options = { auth: {} };

    var collective_server = server(args);
    collective_server.listen(args.port, args.hostname);

}

if(require.main === module) {
    main();
}

module.exports = main;
